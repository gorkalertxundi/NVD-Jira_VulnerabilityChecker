import os
import sys
import json
import requests
import time
from jira import JIRA

class ControlledException(Exception):
    def __init__(self, message):
        self.message = message

    def __str__(self):
        return f"{type(self).__name__}: {self.message}"

def addAffectedProducts(issue,productName):
    current_values = issue.fields.customfield_11870
    values_to_set = [{'value':productName}]
    if current_values is not None:
        for jiraCustomField in current_values:
            values_to_set.append({'value':jiraCustomField.value})
    # Update Jira issue with affected projects
    issue.update(fields={'customfield_11870': values_to_set})

def main():
    # NVD API endpoint
    nvd_cve_url = 'https://services.nvd.nist.gov/rest/json/cves/2.0'
    nvd_cpe_url = 'https://services.nvd.nist.gov/rest/json/cpes/2.0'

    # Jira Server
    jira_url = 'https://xxxxxx.atlassian.net'


    # Check if the filename, username and password arguments were provided
    if len(sys.argv) < 4:
        print("[ERROR] Please provide a filename, username and password as arguments.")
        sys.exit(1)

    # Get the filename, username and password from the command-line arguments
    filename = sys.argv[1]
    # Jira API auth credentials
    jira_username = sys.argv[2]
    jira_token = sys.argv[3]

    # Initilize Jira REST Client
    jira = JIRA(server=jira_url, basic_auth=(jira_username, jira_token))

    # List of CPE items to search for
    with open(filename, "r") as f:
        # Read the file content and split it into lines
        lines = f.readlines()
        
        # Remove any trailing newlines from each line and store them in an array
        cpe_list = [line.rstrip() for line in lines]
        
        # Get productName for product level management on issues
        productName = os.path.splitext(os.path.basename(filename))[0]
    # Search for vulnerabilities on NVD API for each CPE item
    for cpe_identifier in cpe_list:
        nvd_cve_data = get_nvd_cve_data_with_retry(cpe_identifier=cpe_identifier, nvd_cve_url=nvd_cve_url)
        nvd_cpe_data = get_nvd_cpe_data_with_retry(cpe_identifier=cpe_identifier, nvd_cpe_url=nvd_cpe_url)
        if nvd_cpe_data['totalResults'] < 1:
            print(f"[INFO] CPE {cpe_identifier} does not still exist on NVD, skipping...")
            continue
        cpe = nvd_cpe_data['products'][0]['cpe']

        # Check if any vulnerabilities were found
        if nvd_cve_data['totalResults'] > 0:
            print(f"[INFO] Total vulnerabilities found for {cpe_identifier}: {nvd_cve_data['totalResults']}")
            vulnerability_list = nvd_cve_data['vulnerabilities']
            for vulnerability in vulnerability_list:
                # Get vulnerability information
                cve_id = vulnerability['cve']['id']
                # Check if Jira issue already exists with the same CVE ID
                jira_search_data = jira.search_issues('project = CYBER AND summary ~ "'+cve_id+'"', json_result=True)
                if jira_search_data['total'] > 0:
                    # Check for duplicated issues
                    if jira_search_data['total'] > 1:
                        duplicatedIssueKeys = []
                        for issue_data in jira_search_data['issues'] : duplicatedIssueKeys.append(issue_data['key'])
                        raise ControlledException(f"[WARNING] {jira_search_data['total']} issues ({duplicatedIssueKeys}) exist with the same CVE ID: {cve_id}")
                    alreadyCreatedIssueKey = jira_search_data['issues'][0]['key']
                    alreadyCreatedIssue = jira.issue(alreadyCreatedIssueKey)
                    print(f"[INFO] Jira issue {jira_search_data['issues'][0]['key']} already exists with the same CVE ID: {cve_id}. Updating affected projects if needed...")
                    addAffectedProducts(issue=alreadyCreatedIssue,productName=productName)
                else:
                    # Create a new issue in Jira
                    issue = jira.create_issue(fields=createIssueComponent(vulnerability,cpe))
                    addAffectedProducts(issue,productName)
                    print(f"[INFO] Jira issue {issue.key} created for {cpe_identifier} with CVE ID: {cve_id}")
        else:
            print(f"[INFO] No vulnerabilities found for {cpe_identifier}")

def get_nvd_cve_data_with_retry(cpe_identifier, nvd_cve_url):
    retry_count = 0
    while retry_count < 10:
        nvd_cve_response = requests.get(nvd_cve_url, params={'cpeName': cpe_identifier})
        if nvd_cve_response.status_code == 200:
            nvd_cve_data = json.loads(nvd_cve_response.text)
            return nvd_cve_data
        else:
            retry_count += 1
            sleep_time = 2 ** retry_count
            print(f"[WARNING] Request for CVE data failed with status code {nvd_cve_response.status_code}. Retrying in {sleep_time} seconds...")
            time.sleep(sleep_time)
    raise ControlledException("[ERROR] Failed to retrieve CVE data from NVD after 10 retries.")

def get_nvd_cpe_data_with_retry(cpe_identifier, nvd_cpe_url):
    retry_count = 0
    while retry_count < 10:
        nvd_cpe_response = requests.get(nvd_cpe_url, params={'cpeMatchString': cpe_identifier})
        if nvd_cpe_response.status_code == 200:
            nvd_cpe_data = json.loads(nvd_cpe_response.text)
            return nvd_cpe_data
        else:
            retry_count += 1
            sleep_time = 2 ** retry_count
            print(f"[WARNING] Request for CPE data failed with status code {nvd_cpe_response.status_code}. Retrying in {sleep_time} seconds...")
            time.sleep(sleep_time)
    raise ControlledException("[ERROR] Failed to retrieve CPE data from NVD after 10 retries.")

def getMetricsFromCvssVersion2Data(vulnerability):
    cvssMetric = vulnerability['cve']['metrics']['cvssMetricV2'][0]
    cvssData = cvssMetric['cvssData']
    metrics = {
        'baseScore': cvssData['baseScore'],
        'vectorString': cvssData['vectorString'],
        'attackVector': cvssData['accessVector'],
        'attackComplexity': cvssData['accessComplexity'],
        'privilegesRequired': cvssData['authentication'],
        'userInteraction': cvssMetric['userInteractionRequired'],
        'confidentialityImpact':cvssData['confidentialityImpact'],
        'integrityImpact':cvssData['integrityImpact'],
        'availabilityImpact':cvssData['availabilityImpact'] 
    }
    return metrics

def extractCVSSMetrics(vulnerability):
    metricCategories = vulnerability['cve']['metrics'].keys()
    if 'cvssMetricV31' in metricCategories:
        return vulnerability['cve']['metrics']['cvssMetricV31'][0]['cvssData']
    elif 'cvssMetricV30' in metricCategories:
        return vulnerability['cve']['metrics']['cvssMetricV30'][0]['cvssData']
    elif 'cvssMetricV2' in metricCategories:
        return getMetricsFromCvssVersion2Data(vulnerability)
    else:
        raise ControlledException('No CVSS Metrics where found')

def getExploitabilityString(cvssScore):
    integerCvssScore = float(cvssScore)
    if integerCvssScore <= 3.9:
        return {'value': 'Low: 0.1-3.9 rating.'}
    elif integerCvssScore <= 6.9:
        return {'value': 'Medium: 4.0-6.9 rating.'}
    elif integerCvssScore <= 8.9:
        return {'value': 'High: 7.0-8.9 rating.'}
    elif integerCvssScore <= 10:
        return {'value': 'Critical: 9.0-10.0 rating.'}

def createIssueComponent(vulnerability, cpe):
    cvssMetrics = extractCVSSMetrics(vulnerability)
    cvss_table = '''|| *Vulnerability information* ||  || 
                    | Source identifier | {} |
                    | Base score | {} |
                    | Vector | {} |
                    | Attack vector | {} |
                    | Attack complexity | {} |
                    | Privileges required | {} |
                    | User interaction | {} |'''.format(vulnerability['cve']['sourceIdentifier'], 
                                                        cvssMetrics['baseScore'],
                                                        cvssMetrics['vectorString'],
                                                        cvssMetrics['attackVector'],
                                                        cvssMetrics['attackComplexity'],
                                                        cvssMetrics['privilegesRequired'],
                                                        cvssMetrics['userInteraction']
                                                    )
    
    cpe_information_table = '''|| *SOUP Item Information* ||  || 
                                | Deprecated | {} |
                                | CPE Identifier | {} |
                                | Last modified | {} |'''.format(cpe['deprecated'],
                                                                cpe['cpeName'],
                                                                cpe['lastModified']
                                                                )
    
    references = '\n'.join(['- [{}]'.format(ref['url']) for ref in vulnerability['cve']['references']])

    affected_software = '\n'.join(['- {}'.format(aff_software_cpe['criteria']) for aff_software_cpe in vulnerability['cve']['configurations'][0]['nodes'][0]['cpeMatch']])
    
    exploitabilityString = getExploitabilityString(cvssMetrics['baseScore'])

    cia = 'C: ' + cvssMetrics['confidentialityImpact'] + ', I: ' + cvssMetrics['integrityImpact'] + ', A: ' + cvssMetrics['availabilityImpact']

    return {
        'project': {'key': 'CYBER'},
        'summary': vulnerability['cve']['id'] + ' - ' + cpe['titles'][0]['title'],
        'components': [{'name': 'Runtime Vulnerability'}],
        'description': 
            'h2. Description' + '\n' +
            vulnerability['cve']['descriptions'][0]['value'] + '\n' +
            '[More about this issue|https://nvd.nist.gov/vuln/detail/' + vulnerability['cve']['id'] + ']' + '\n' +
            'h2. CVSS' + '\n' +
            cvss_table + '\n\n' +
            'h2. References to Advisories, Solutions and Tools' + '\n' +
            references + '\n\n' +
            'h2. Known Affected Software Configurations' + '\n' +
            affected_software + '\n\n' +
            'h2. Other information' + '\n' +
            cpe_information_table,
        'issuetype': {'name': 'Cybersecurity Task'},
        #'customfield_YYYYY': cia,
        #'customfield_XXXXX': exploitabilityString
    }
# Execution
main()
